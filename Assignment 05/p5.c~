#include <stdio.h>
#include <stdlib.h>

#define MAX 10000 //1.0e38
int cnt = 0;
int max;
int OptimalBST(int* p, int n);
void PrintOptimal(int** s, int i, int j);
int FreqSum(int* p, int i, int j);
void freeMem(char** b,int** c,int m);


int main(int argc,char* argv[])
{
 int i;
 int j;
 int totnum;

 scanf("%d",&totnum);
 
// int* p =  (int *)malloc(sizeof(int) * totnum);
 int p[1000];
 max = 0;
 for(i = 0; i < totnum; i++)
 {
	scanf("%d",&p[i]);
 }
 int res = OptimalBST(p,totnum);
 printf("Optimal solution = %d",res);
 return 0;
	
}


int OptimalBST(int* p, int n)
{
	int cost[n][n];
	
	int i = 0, l = 0, k = 0;
	int c1, c2, c;
		 
	for(i = 0; i < n; i++)
	{
		cost[i][i] = p[i];
	}
	for(l = 2; l <= n; l++)
	{
		for(i = 0; i <= (n - l + 1); i++)
		{
			int j = i + l - 1;
			cost[i][j]= MAX;
			
			for(k = i; k <= j; k++)
			{
				if(k > i)
					c1 = cost[i][k-1];
				else
					c1 =0;
				
				if(k < j)
				 c2 = cost[k+1][j];
				else
				 c2 = 0;
				
				c = c1 + c2 + FreqSum(p,i,j);
			
				if(c < cost[i][j])
                  cost[i][j] = c;
			}
		}
	}
 return cost[0][n-1];
}

int FreqSum(int* p, int i, int j)
{
	int k = 0, sum = 0;

	for(k = i; k < j;k++)
	{ 
	sum += p[k];
	}
}
void freeMem(char** b,int** c,int m)
{
 int i;
 //Deallocate memory
 for(i = 0; i < m; i++)
 {
  free(b[i]);
  free(c[i]);
 }
 free(b);
 free(c);
}

